#!/usr/bin/env bash

# shellcheck disable=SC2046
# shellcheck disable=SC2034
PROJECT_ROOT="$(dirname $(dirname $(realpath "$0")))" # Not the src directory but the root directory
UTILS_DIR="$PROJECT_ROOT/src/utils"
LOG_DIR="$PROJECT_ROOT/logs"
LOG_FILE="$(date +%Y-%m-%d_%H-%M-%S).log"

declare JSON_DATA

VERBOSE=false

# shellcheck disable=SC1091
source "$UTILS_DIR/functions"

# shellcheck disable=SC1091
source "$UTILS_DIR/check"

# shellcheck disable=SC1091
source "$UTILS_DIR/fetcher"

# shellcheck disable=SC1091
source "$UTILS_DIR/filter"


function getArgs() {
	while [[ $# -gt 0 ]]; do
		case "$1" in
		-v | --verbose)
			VERBOSE=true
			shift
			;;
		-c | --check)
			VERBOSE=true
			checkDep
			shift
			exit
			;;
    --fix-dependencies)
			VERBOSE=true
      fixDep
			;;

		-h | --help)
			help
			shift
			exit
			;;
		*)
			help
			shift
			exit 1
			;;
		esac
	done
}

help() {
	echo "Usage: $0 [OPTIONS]"
	echo "Options:"
	echo "  -v, --verbose           Enable verbose mode"
	echo "  -c, --check             Check dependencies"
	echo "  --fix-dependencies      Fix dependencies and try To install it"
}

getDistro() {
	if [ -f /etc/os-release ]; then
		. /etc/os-release
		echo "$NAME"
	elif type lsb_release >/dev/null 2>&1; then
		lsb_release -si
	elif [ -f /etc/lsb-release ]; then
		. /etc/lsb-release
		echo "$DISTRIB_ID"
	elif [ -f /etc/debian_version ]; then
		echo "Debian"
	elif [ -f /etc/SuSe-release ]; then
		echo "SuSe"
	elif [ -f /etc/redhat-release ]; then
		echo "Red Hat"
	else
		echo "Unknown"
	fi
}



fixDep() {
  checkDep
	distro=$(getDistro)
	echo "Installing dependencies for $distro"
	if [ "$distro" == "Ubuntu" ]; then
		sudo apt install -y "${missingDependencies[@]}"
	elif [ "$distro" == "Debian" ]; then
		sudo apt install -y "${missingDependencies[@]}"
	elif [ "$distro" == "Arch Linux" ]; then
		sudo pacman -S "${missingDependencies[@]}"
	elif [ "$distro" == "EndeavourOS" ]; then
		sudo pacman -S "${missingDependencies[@]}"
	elif [ "$distro" == "Fedora" ]; then
		sudo dnf install -y "${missingDependencies[@]}"
	elif [ "$distro" == "CentOS" ]; then
		sudo yum install -y "${missingDependencies[@]}"
	elif [ "$distro" == "Red Hat" ]; then
		sudo yum install -y "${missingDependencies[@]}"
	elif [ "$distro" == "SuSe" ]; then
		sudo zypper install -y "${missingDependencies[@]}"
	else
		echo "Unknown Distro"
	fi
  #shellcheck disable=SC2181
	if [ $? -eq 0 ]; then
		log "Successfully installed dependencies"
    exit
	else
		flog "Failed to install dependencies"
		exit 1
	fi
}


performChecks() {
	log ":: Checking dependencies"
	if ! checkDep; then
		flog "Please install the missing dependencies"
		exit 1
	fi
	log ""
	log ":: Checking root previleges"
	if ! checkRoot; then
    flog "Please run this script as root. use (pkexec <command>)"
		exit 1
	else
		log $(ok "Running as root")
	fi
}

main() {
	getArgs "$@"
	performChecks
	getFullDataJson
  filterDATA
  if isJson "$FILTERED_DATA"; then
    log "$(ok "Filtered data successfully")"
  else
    flog "$(err "Filtered data is invalid\nCheck Logs $LOG_DIR/$LOG_FILE")"
    exit 1
  fi
  FINAL_DATA="{\"unfiltered\":$JSON_DATA,\"filtered\":$FILTERED_DATA}"
  log ""
	log ":: Testing JSON data integrity"
	if isJson "$FINAL_DATA"; then
		log "$(ok "Generated a valid JSON data")"
		# shellcheck disable=SC2005
		echo "$(echo "$FINAL_DATA" | jq)" >"$PROJECT_ROOT/data.json"
	else
		flog "$(err "Generated JSON data is invalid\nCheck Logs $LOG_DIR/$LOG_FILE")"
		exit 1
	fi
}

main "$@"
